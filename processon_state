# -*- coding: utf-8 -*-
"""
Created on Mon Aug  7 13:12:16 2017
"""

import matplotlib.pyplot as plt
import pandas as pd

def soccum(df):
    '''
    函数 边缘soc累积时间比例: 
        soccum(df)
        
        input: 
            df 经过初始化的数据dataframe
            
        output: 
            [>90,80-90,10-20,<10,总时间]
    '''
    s9 = df[df.soc>=900].dt.sum()
    s8 = df[(df.soc>=800) & (df.soc<900)].dt.sum()
    s2 = df[(df.soc>100) & (df.soc<=200)].dt.sum()
    s1 = df[df.soc<=100].dt.sum()
    totaltime = df.dt.sum()
    p9 = s9/totaltime
    p8 = s8/totaltime
    p2 = s2/totaltime
    p1 = s1/totaltime
    
    #结果输出为dict
    soccum=dict({'soc900':p9,'soc800':p8,'soc200':p2,'soc100':p1})
    
    return soccum

def tempcum(df,templim):
    '''
    函数 非正常温度累积时间比例: 
        tempcum(df)
        
        input: 
            df 经过初始化的数据dataframe\n
            templim=[低温一级告警值,5,25,40,高温一级告警] 温度统计范围，若仅运行vehicle,则以默认值[-40,5,25,40,60]运行；若与batch类共同使用，
            则使用该版本的温度告警上下限作为两端阈值，仅需输入除阈值外的3个温度段分割值
            
        output: 
            [<temp0,temp0_1,temp1_2,temp2_3,>temp3,总时间(单位：s)]
    '''    
    df['temp'] = (df.maxtemp1 + df.mintemp1) / 2 
    df['temp'] = df.temp.rolling(2).mean()
    t5 = df[df.temp>=templim[4]].dt.count()*5
    t4 = df[(df.temp>=templim[3]) & (df.temp<templim[4])].dt.count()*5
    t3 = df[(df.temp>=templim[2]) & (df.temp<templim[3])].dt.count()*5
    t2 = df[(df.temp>=templim[1]) & (df.temp<templim[2])].dt.count()*5
    t1 = df[(df.temp>templim[0]) & (df.temp<=templim[1])].dt.count()*5
    t0 = df[df.temp<=templim[0]].dt.count()*5
    temp_totaltime = df.dt.count()*5
    temp5 = t5/temp_totaltime
    temp4 = t4/temp_totaltime
    temp3= t3/temp_totaltime
    temp2= t2/temp_totaltime
    temp1 = t1/temp_totaltime
    temp0= t0/temp_totaltime

    tempcum= (temp0,temp1,temp2,temp3,temp4,temp5,temp_totaltime)
    return tempcum        

def tempbyday(df,imei):
    tempbyday=pd.DataFrame()
    df_grouped_date = df.groupby('date')
    tempbyday['tempmax'] = df_grouped_date.maxtemp1.max()
    tempbyday['tempmin'] = df.groupby('date').mintemp1.min()
    tempbyday['tempmean'] = (df.groupby('date').maxtemp1.mean() + df.groupby('date').mintemp1.mean()) * 0.5
    tempbyday['imei'] = imei
    
    return tempbyday
    
    
#电流分布
def curbyday(df):
    '''
    字段含义：
        chargemax:某日期下充电最大电流，单位A float64\n
        dischargemin:某日期下放电最小电流，单位A float64\n
        chargemean:某日期下充电平均电流，单位A float64\n
        dischargemean:某日期下放电平均电流，单位A float64\n
    '''
    curbyday=pd.DataFrame()
    curbyday.loc[:,'chargemax'] = df[df.ncurrent>0].groupby('date').ncurrent.max()
    curbyday.loc[:,'dischargemin'] = df[df.ncurrent<0].groupby('date').ncurrent.min()
    curbyday.loc[:,'chargetime'] = df[df.ncurrent>0].groupby('date').ndt.sum()
    curbyday.loc[:,'dischargetime'] = df[df.ncurrent<0].groupby('date').ndt.sum()
    curbyday.loc[:,'chargeq'] = df[df.ncurrent>0].groupby('date').deltac.sum()
    curbyday.loc[:,'dischargeq'] = df[df.ncurrent<0].groupby('date').deltac.sum()
    curbyday=curbyday[(curbyday.dischargetime>0)&(curbyday.chargetime>0)]
    
    curbyday.loc[:,'chargemean'] = curbyday.chargeq / curbyday.chargetime
    curbyday.loc[:,'dischargemean'] = curbyday.dischargeq / curbyday.dischargetime
    
    return curbyday

#充电曲线    
def chargecurve(df,c,n=0,save=False,path=None):
    '''
    函数 输出所有充电循环曲线: 
        chargecurve(df,c,save=False,path=None)
        
        input: 
            df 经过初始化的数据dataframe\n
            c 含有充电起止下标的df\n
            n 输出前多少次 可选 默认全部\n
            save 是否保存 可选 \n
            path 保存路径 可选
            
        output: 
            绘制的曲线 (和本地保存的图片文件)
    '''
    
    if n == 0:
        k = len(c)
    elif n > len(c):
        k = len(c)
    else:
        k = n
    for i in range(k):
        s=c.loc[i,'start']
        e = c.loc[i,'end']
        cce = c.loc[i,'ccend']
        #前后各延长20个点
        d = df.loc[max(0,s-20):min(e+20,len(df)-1)]
        plt.figure()
        #电流曲线
        d.ncurrent.plot()
        plt.axhline(y=0, linewidth=1, color='b',linestyle='--')    #增加水平线y=0
        #标记起止和恒流末端的位置
        plt.plot(d.loc[cce].name,d.loc[cce].ncurrent,'o',d.loc[s].name,d.loc[s].ncurrent,'o',d.loc[e].name,d.loc[e].ncurrent,'o')
        #电压曲线
        d.sumvolt.plot(secondary_y=True)
        plt.title(str(i+1))
        plt.xlim(s-25,e+25)    #限制x轴范围
        if (save) & (path != None):
            #注意输入的路径最后不带/或\
            plt.savefig(path+'/%s.jpeg'%i)
            plt.close('all')  
            
#告警统计
def alarmStats(path):
    import pandas as pd
    try:
        df = pd.read_csv(filepath_or_buffer = path)
    #应对路径中包含中文,pandas可能出现的读取不了文件的bug
    except:
        df = pd.read_csv(filepath_or_buffer = path,engine='python')
    
    df['day_in']=df.start_date.str[:10]
    
    df = df[df.start_date.str[:4].astype('int').between(2010,2050)]#转换成文本前4个年份数字
    df.loc[:,'start_date'] = df.start_date.astype('datetime64[ns]')
    df.loc[:,'end_date'] = df.end_date.astype('datetime64[ns]')
    
    algroupby=df.groupby([df['imei'],df['day_in'],df['alarm_type'],df['alarm_level']])
    al=algroupby.duration.sum().reset_index()
    al1=algroupby.size().reset_index()
    al1['duration']=al.duration
    al1.columns.values[4] = 'numbers' 
    
    al1['day_in']=al1.day_in.astype('datetime64[ns]')
    al1=al1.sort_values(by='day_in')
    al1.reset_index(drop=True,inplace=True)
    return al1

def stop(df):
    '''
    字段解释：
        stopT:静止平均温度，单位℃ float64\n
        stopsoc:静止过程的soc（%） int32\n
        stopt：静止时间长度，单位（hour）float64\n
    '''
    tt = pd.Timedelta('01:00:00')
    stoptt=df[(df.dt>tt)&(df.dt<tt*48)]
    stoptt.reset_index(drop=True,inplace=True)
    stop=pd.DataFrame()
    stop.loc[:,'stopT'] = (stoptt.maxtemp1+stoptt.mintemp1)/2
    stop.loc[:,'stopsoc'] = stoptt.soc
    stop.loc[:,'stopt'] = stoptt.dt/pd.Timedelta('01:00:00')
    stop.loc[:,'date']=stoptt.date
    return stop

def Temp(df):
    '''
    字段解释：
        Tmax:按在线天数分类的最大温度，单位℃ float64\n
        Tmin:按在线天数分类的最小温度，单位℃ float64\n
        deltaT:按在线天数分类的最大温度与最小温度之差，单位℃ float64\n
    '''
    Temp=pd.DataFrame()
    Temp.loc[:,'Tmax'] = df.maxtemp1.groupby(df.since).max()
    Temp.loc[:,'Tmin'] = df.mintemp1.groupby(df.since).min()
    Temp.loc[:,'deltaT'] =Temp.loc[:,'Tmax'] -Temp.loc[:,'Tmin']
    Temp.loc[:,'date']=df.date.groupby(df.since).min()
    return Temp

def constant(df,chargeinfo,ratedc):
    '''
        input: 
            df 经过初始化的数据dataframe\n
            chargeinfo  已保存的充电循环信息dataframe\n
            ratedc 默认90
            
        output: 
            alithiumplatingevent 易发锂沉积充电次数 int64 \n      
            adW 日均充电容量 float64
            afsrate 车辆从观测起始点到观测结束点的快慢充次数比 float64\n
            chardur 日均充电时间 float64\n
            chargetimes 日均充电次数 float64\n
    '''
    #易发锂沉积充电次数--C
    alithiumplatingevent=chargeinfo.lithiumplatingevent.sum()
    #日均充电容量
    adW=(abs(df.dW).sum()/df.since.nunique())/1000
    #快充比    
    m=chargeinfo.fs.sum()
    n=len(chargeinfo)
    afsrate=m/n    
    
    #日均充电时间
    chardur=(chargeinfo.duration.sum()/chargeinfo.days.nunique())/3600
    #日均充电次数
    chargetimes=len(chargeinfo.duration)/(chargeinfo.days.nunique())
    
    constant=(alithiumplatingevent,adW,afsrate,chardur,chargetimes)
    return constant
     
#放电电流区间内count，根据不同车辆自行调整
def dischargetimes(discharge,ratedc):
    '''
    函数：车辆从观测起始点到观测结束点车辆放电分类区间个数
    input: 
        discharge 放电段每次平均电流\n
        ratedc 默认90
        
    output: 
        d1 电流<0.5个额定容量个数\n
        d2 电流>0.5个<1个额定容量个数\n
        d3 电流>1个<1.5个额定容量个数\n
        d4 电流>1.5个<2个额定容量个数\n
        d5 电流>2个<2.5个额定容量个数\n
        d6 电流>2.5个额定容量个数\n
    '''
    d1= (abs(discharge.idischargeave)<=ratedc*0.5).astype(int).sum()
    d2= ((abs(discharge.idischargeave)<=ratedc*1) & (abs(discharge.idischargeave)>0.5*ratedc)).astype(int).sum()
    d3 =( (abs(discharge.idischargeave)<=1.5*ratedc) & (abs(discharge.idischargeave)>1*ratedc)).astype(int).sum()
    d4 =((abs(discharge.idischargeave)<=ratedc*2)& (abs(discharge.idischargeave)>1.5*ratedc)).astype(int).sum()
    d5 =( (abs(discharge.idischargeave)<=2.5*ratedc)& (abs(discharge.idischargeave)>2*ratedc)).astype(int).sum()
    d6 = (abs(discharge.idischargeave)>2.5*ratedc).astype(int).sum()
    #结果输出为list
    dischargetimes = (d1,d2,d3,d4,d5,d6)
    return dischargetimes

def onlinedateStats(df,imei):
    '''函数：车辆从观测起始点到观测结束点车辆在线日期
    
    input: 
        df
        
    output: 
        onlinedate: dataframe(onduration:每日在线时长/hour，date：在线日期)
    '''
#    onlinedate=pd.DataFrame({'onlinedate':df.date.unique()})
#    onlinedate[''] = onlinedate.index.values   #for plotting
    dgrouped = df.groupby('date')
    onlinedate = dgrouped['dt'].agg({'onduration':lambda x:len(x)*5/3600}).reset_index()
    onlinedate.rename(index=str,columns={'date':'onlinedate'},inplace=True)
    onlinedate['imei']=imei

    return onlinedate
